name: 'Terraform Azure Deploy'

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.BACKEND_CONTAINER }}" \
          -backend-config="key=${{ secrets.BACKEND_KEY }}"

    # Terraform Plan
      # (1) Only runs on Pull Requests (2) Creates an execution plan showing what will be changed (3) Posts the plan as a comment on the PR
    - name: Terraform Plan   
      id: plan
      if: github.event_name == 'pull_request'
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
      run: terraform plan -no-color
      continue-on-error: false  

    - name: Update Pull Request
      uses: actions/github-script@v6           # Uses GitHub's JavaScript action to interact with GitHub API
      if: github.event_name == 'pull_request'  # Trigger step only incase of pull_request
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"  # Create env var PLAN containing output from prev plan step, references the standard output from the plan step
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}   # It is used for authentication
        script: | # Create a formatted comment on PR
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\` 
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

      # Terraform Apply
      # (1) Only runs on Push event on main branch
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
        ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
      run: |
        echo "Starting Terraform Apply..."
        echo "Current branch: ${{ github.ref }}"
        echo "Event type: ${{ github.event_name }}"
        terraform apply --auto-approve